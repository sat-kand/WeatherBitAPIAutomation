package com.qa.Utils;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

import com.qa.Base.TestBase;
//import com.qa.test.WeatherAPITest2;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

/**
 *
 * @author Sat Kandhaswami This class provides various utility methods
 *
 */
public class Utility extends TestBase {

    public static int count = 0;
    public static RequestSpecification requestSpecification;

    /**
     * Converts Raw response into Json format
     *
     * @param rawResponse This is Raw response generated by Weather API Client
     * @return returns response in Json format
     */
    public static JsonPath convertToJsonResponse(Response rawResponse) {

        String responseString = rawResponse.asString();
        JsonPath responseJson = new JsonPath(responseString);
        return responseJson;
    }

    /**
     * Retrieves value for a given key from Json response
     *
     * @param responseJson: This is response in Json format
     * @param key:          This is a key whose value you want from Json response.
     * @return value of key in String format
     */
    public static String getValueFromJsonResponse(JsonPath responseJson, String key) {
        Object value = responseJson.get(key);
        return value.toString();
    }

    /**
     * This methods generates request based on the parameters passed in
     * config.properties file. It also configures filters for request and response
     * logging.
     *
     * @return requestSpecification This is newly built request based on the
     *         parameters.
     * @throws FileNotFoundException
     */

    public static RequestSpecification generateRequestSpecification() throws FileNotFoundException {

        PrintStream requestPrintStream = new PrintStream(
                new FileOutputStream(System.getProperty("user.dir") + "/target/request.log"));
        PrintStream responsePrintStream = new PrintStream(
                new FileOutputStream(System.getProperty("user.dir") + "/target/response.log"));
        RequestSpecBuilder requestBuilder = new RequestSpecBuilder();
        requestBuilder.setBaseUri(properties.getProperty("baseuri"));
        requestBuilder.addQueryParam("postal_code", properties.getProperty("postal_code"));
        requestBuilder.addQueryParam("key", properties.getProperty("apiKey"));
        requestBuilder.addFilter(RequestLoggingFilter.logRequestTo(requestPrintStream));// generate log for request.
        requestBuilder.addFilter(ResponseLoggingFilter.logResponseTo(responsePrintStream));// generate log for response
        requestSpecification = requestBuilder.build();
        return requestSpecification;

    }

    public static RequestSpecification generateLatLongRequestURI() throws FileNotFoundException {

        PrintStream requestPrintStream = new PrintStream(
                new FileOutputStream(System.getProperty("user.dir") + "/target/request.log"));
        PrintStream responsePrintStream = new PrintStream(
                new FileOutputStream(System.getProperty("user.dir") + "/target/response.log"));
        RequestSpecBuilder requestBuilder = new RequestSpecBuilder();
        requestBuilder.setBaseUri(properties.getProperty("baseuri"));
        requestBuilder.addQueryParam("lat", properties.getProperty("latitude"));
        requestBuilder.addQueryParam("lon", properties.getProperty("longitude"));
        requestBuilder.addQueryParam("key", properties.getProperty("apiKey"));
        requestBuilder.addFilter(RequestLoggingFilter.logRequestTo(requestPrintStream));// generate log for request.
        requestBuilder.addFilter(ResponseLoggingFilter.logResponseTo(responsePrintStream));// generate log for response
        requestSpecification = requestBuilder.build();
        return requestSpecification;

    }

}
